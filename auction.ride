{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing NSBT Auction in the Orderbook of Sucrino Protocol 
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}

func getBoolByAddressAndKey(address: Address, key: String) = {
     match getBoolean(address, key) {
            case a:Boolean => a
            case _ => false
    }
}

func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let MINORDERTOTAL = 10*WAVELET
let MAXROI = 95
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------
let SucrinoContractKey = "sucrino_contract"

#-------------------Keys--------------------------------
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let SucrinoAssetIdKey = "sucrino_asset_id"
let ControlContractKey = "control_contract"
let BalanceLockedkKey = "balance_lock_"
let SucreLockedBalanceKey = BalanceLockedkKey + "sucre"
let SucrinoLockedBalanceKey = BalanceLockedkKey + "sucrino"
let LiquidationContractKey = "liquidation_contract"
let FirstOrderKey = "order_first"

func getRoiByOrderIdKey(orderId: String) = "debug_order_roi_" + orderId

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId
#-------------------Convert functions-------------------
func convertSucrinoToSucre(amount: Int, price: Int) = fraction(fraction(amount, 100, price),WAVELET, PAULI)
func convertSucreToSucrino(amount: Int, price: Int) = fraction(fraction(amount, price, 100), PAULI, WAVELET)

func convertSucreToBond(amount: Int, price: Int) = convertSucreToSucrino(amount, price)
func convertBondToSucre(amount: Int, price: Int) = convertSucrinoToSucre(amount, price)

#-------------------Global vars-------------------------
let sucrinoContract = addressFromStringValue("3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo")
let controlContract = addressFromStringValue("3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP") ## The value from sucrino.ride
let liquidationContract = addressFromStringValue("3P4PCxsJqMzQBALo8zANHtBDZRRquobHQp7")
let sucrinoAssetId = fromBase58String("DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p") # Assets ids. The value from sucrino.ride
let bondAssetId = fromBase58String("6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g") # NSBT with 6 decimals as USDN does

let isBlocked = getBoolByAddressAndKey(controlContract, "is_blocked")

#-------------------Global vars deficit, locked & supply -------------------------
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride
let sucrinoLockedBalance = getNumberByAddressAndKey(sucrinoContract, SucrinoLockedBalanceKey) #locked balance from USDN -> Sucre swap
#cannot be expressed by complexity limitations: let sucreLockedBalance = getNumberByAddressAndKey(sucrinoContract, SucreLockedBalanceKey) #locked balance from Sucre -> USDN swap
let reserve = sucreBalance(sucrinoContract) - 
    getNumberByAddressAndKey(sucrinoContract, SucreLockedBalanceKey) #Sucre reserves to cover USDN supply
let sucrinoSupply = sucrinoLockedBalance + extract(assetInfo(sucrinoAssetId)).quantity - assetBalance(sucrinoContract, sucrinoAssetId) - assetBalance(liquidationContract, sucrinoAssetId) # supply outside main sc or liquidation contract
let deficit = sucrinoSupply - convertSucreToSucrino(reserve, currentPrice)
let firstOrder = getStringByKey(FirstOrderKey)

#-------------------Get functions----------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))

#-------------------Any functions----------------------

#-------------------Callable---------------------------

# set buy NSBT order
# [called by user]
@Callable(i)
func addBuyBondOrder(price : Int, prevOrder: String) = {
    let pmt = extract(i.payment);
    let newOrderId = toBase58String(keccak256(toBytes(price) + toBytes(pmt.amount) + i.caller.bytes + toBytes(height) + i.transactionId))
    # price = 100*nsbt/sucre, but we have to work with price with another scale: priceSucreByBondCents = 100*sucre/nsbt, so priceSucreByBondCents = 100*1/(price/100)
    let priceSucreByBondCents = fraction(100, 100, price)
    let roi = fraction(priceSucreByBondCents - currentPrice, 100, currentPrice) # Example: 1.2 Sucre/nsbt (1.2 NSBT for 1 sucre) and 0.8 Sucre/USD (0.8 usd for 1 sucre) gives 100*(1.2-0.8/0.8) 50% ROI

    if (isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles")
    else if(pmt.amount < MINORDERTOTAL)
        then throw("min order total equals " + toString(MINORDERTOTAL))
    else if (roi > MAXROI)
        then throw("max setOrder ROI is 95%")
    else if (deficit > 0 && roi < 0)
        then throw("can't place order with negative roi during deficit")
    else if (roi < -MAXROI)
        then throw("min setOrder ROI is -95%")
    else if (roi == 0)
        then throw("roi should not be equal to 0")
    else if (isDefined(pmt.assetId))
        then throw("can use sucre only")
    else if(price <= 0)
        then throw("price less zero")
    else if(getOrderOwner(newOrderId) != "")
        then throw("order exists")
    else if(prevOrder != "" && getOrderStatus(prevOrder) != NEW)
        then throw("prev order status is not new")
    else {
        let owner = toString(i.caller)
        let nextOrder = if prevOrder == "" then firstOrder else getNextOrder(prevOrder)
        let nextOrderRoi = getNumberByKey(getRoiByOrderIdKey(nextOrder))
        let isNextOrderError = if(nextOrder != "" && roi >= nextOrderRoi) then true else false;

        let prevOrderRoi = getNumberByKey(getRoiByOrderIdKey(prevOrder))
        let isPrevOrderError = if(prevOrder != "" && roi < prevOrderRoi) then true else false;

        if (isNextOrderError || isPrevOrderError)
            then throw("invalid order isPrevOrderError:" + toString(isPrevOrderError) + " isNextOrderError:" + toString(isNextOrderError))
        else
            WriteSet([
                DataEntry(getPrevOrderKey(newOrderId), prevOrder),
                DataEntry(getNextOrderKey(newOrderId), nextOrder),

                DataEntry(getNextOrderKey(prevOrder), if prevOrder == "" then "" else newOrderId),
                DataEntry(getPrevOrderKey(nextOrder), if nextOrder == "" then "" else newOrderId),

                DataEntry(FirstOrderKey, if firstOrder == "" || firstOrder == nextOrder then newOrderId else firstOrder),

                DataEntry(getOrderPriceKey(newOrderId), price),
                DataEntry(getOrderTotalKey(newOrderId), pmt.amount),
                DataEntry(getOrderOwnerKey(newOrderId), owner),
                DataEntry(getOrderHeightKey(newOrderId), height),
                DataEntry(getOrderStatusKey(newOrderId), NEW),
                DataEntry("debug_order_currentPrice_" + newOrderId, currentPrice),
                DataEntry(getRoiByOrderIdKey(newOrderId), roi)
            ])
    }
}


# cancel buy NSBT order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    let caller = toString(i.caller)

    let nextOrder = getNextOrder(orderId)
    let prevOrder = getPrevOrder(orderId)

    if (isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles")
    else if(owner != caller)
        then throw("permission denied")
    else if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(FirstOrderKey, if firstOrder == orderId then nextOrder else firstOrder),

                DataEntry(getNextOrderKey(prevOrder), nextOrder),
                DataEntry(getPrevOrderKey(nextOrder), prevOrder),
                DataEntry(getOrderStatusKey(orderId), CANCELED)
            ]),
            TransferSet([
                ScriptTransfer(i.caller, amount, unit)
            ])
        )
    }
}

# executing buy NSBT orders from the NSBT orderbook
# called n times until all orders from the NSBT orderbook are sold
# [called by pacemaker oracles]
@Callable(i)
func sellBond() = {
    let bondBalance = assetBalance(this, bondAssetId) #integers (dollars)
    let returnAmount = bondBalance - sucrinoSupply

    if (isBlocked) 
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles")
    else if (bondBalance == 0)
        then throw("without base tokens to sell")
    else if(returnAmount > 0) then {
        # return nsbts back if there is more nsbts than deficit  
        TransferSet([
            ScriptTransfer(sucrinoContract, returnAmount, bondAssetId)
        ])
    }
    else if(firstOrder == "")
        then throw("empty orderbook")
    else {
        let nextOrder = getNextOrder(firstOrder)
        let filledTotal = getOrderFilledTotal(firstOrder) #waveletes; returns 0 if there is no records
        let orderPrice = getOrderPrice(firstOrder) #100*nsbt/sucre
        let roi = getNumberByKey(getRoiByOrderIdKey(firstOrder))

        let priceSucreByBondCents = fraction(100+roi, currentPrice, 100)

        let remainedTotal = getOrderTotal(firstOrder) - filledTotal #waveletes
        let amountToExecuteOrder = convertSucreToBond(remainedTotal, priceSucreByBondCents); # expected price format 100*Sucre/usd; return scale: nsbt (integers/dollars)
    
        let fillOrderCondition = bondBalance >= amountToExecuteOrder
        let fillableOrderAmount = if(fillOrderCondition) then amountToExecuteOrder else bondBalance #scale: nsbt (integers/dollars) то, сколько бондов можно продать в эту итерацию

        let totalOrderWaveletesRequired = convertBondToSucre(fillableOrderAmount, priceSucreByBondCents) # expected in wavelets
        let nbTokensSellCondition = fraction(deficit, 100, sucrinoSupply) >= roi # it's working for both: deficit & profict as well (15% > 10% and -15% < -10%)

        if (!nbTokensSellCondition)
            then throw("innapropriate roi: " + toString(roi))
        else if (amountToExecuteOrder == 0) then
            # this code is executing if there is not enough amount of sucre to sell integer number of nsbt, but there is still remaining sucre amount in the order
            ScriptResult(
                WriteSet([
                    DataEntry(FirstOrderKey, nextOrder),
                    DataEntry(getPrevOrderKey(nextOrder), ""), #if current first order has new status filled so, his prev order is now empty
                    DataEntry(getOrderStatusKey(firstOrder), FILLED)
               ]),
               TransferSet([
                    ScriptTransfer(addressFromStringValue(getOrderOwner(firstOrder)), remainedTotal, unit)
                ])
            )
        else if(totalOrderWaveletesRequired == 0) then
            throw("cannot fill order at the moment") #if not enough nsbt to fill the order by order price
        else {
            let newStatus = if(fillOrderCondition && (remainedTotal == 0 || remainedTotal == totalOrderWaveletesRequired)) then FILLED else NEW
            ScriptResult(
                WriteSet([
                    DataEntry(getPrevOrderKey(nextOrder), if(newStatus == FILLED) then "" else firstOrder), #if current first order has new status filled so, his prev order is now empty
                    DataEntry(FirstOrderKey, if(newStatus == FILLED) then nextOrder else firstOrder),

                    DataEntry(getOrderFilledTotalKey(firstOrder), filledTotal + totalOrderWaveletesRequired),
                    DataEntry(getOrderStatusKey(firstOrder), newStatus) # filled status if there is no remained waveletes in the order
               ]),
               TransferSet([
                    ScriptTransfer(addressFromStringValue(getOrderOwner(firstOrder)), fillableOrderAmount, bondAssetId),
                    ScriptTransfer(sucrinoContract, totalOrderWaveletesRequired, unit)
                ])
            )
        }
    }
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "#",
        "#",
        "#",
        "#"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
